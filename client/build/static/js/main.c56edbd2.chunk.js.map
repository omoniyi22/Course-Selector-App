{"version":3,"sources":["queries/queries.js","CourseDetails.js","CourseList.js","AddCourse.js","index.js"],"names":["getCourseQuery","gql","getColleges","addCourse","getOneCourseQuery","deleteCourse","CourseDetails","state","null","console","log","this","props","course","data","Id","undefined","loading","key","id","className","name","duration","college","length","map","res","displayCourseDetails","Component","graphql","options","variables","CourseList","selected","onDelete","bind","onClick","e","setState","target","refetchQueries","query","displayCourse","courses","compose","AddCourse","course_name","college_id","onChange","onSubmit","preventDefault","collegeId","value","colleges","type","displayCollege","client","ApolloClient","uri","Graph","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c56edbd2.chunk.js","sourcesContent":["import { gql } from 'apollo-boost'\r\n\r\nconst getCourseQuery = gql`\r\n{\r\n    courses{\r\n        name\r\n        id\r\n    }\r\n}\r\n`\r\nconst getColleges = gql`\r\n{\r\n    colleges{\r\n        name\r\n        id\r\n    }\r\n}\r\n`\r\nconst addCourse = gql`\r\nmutation($name: String!,$duration:String! $collegeId: ID!){\r\n    addCourse(name: $name, duration: $duration, collegeId: $collegeId ){\r\n    name\r\n    id\r\n    }\r\n}\r\n`\r\nconst getOneCourseQuery = gql`\r\n    query($id: ID){\r\n        course(id: $id){\r\n            id\r\n            name\r\n            duration\r\n            college{\r\n                id\r\n                name\r\n                since\r\n                course{\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\nconst deleteCourse = gql`\r\n    mutation($id: ID!){\r\n        deleteCourse(id: $id){\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\n\r\nexport { getColleges, deleteCourse, getCourseQuery, addCourse, getOneCourseQuery }","import React, { Component } from 'react'\r\nimport { graphql } from 'react-apollo'\r\nimport { getOneCourseQuery } from './queries/queries'\r\n\r\nclass CourseDetails extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      null: null\r\n    }\r\n  }\r\n  componentDidUpdate() {\r\n\r\n  }\r\n  displayCourseDetails() {\r\n    console.log(this.props)\r\n    let course = this.props.data.course\r\n    if (this.props.Id == null || this.props.Id == undefined) {\r\n      return (\r\n        <div> No Course Selected Yet</div>\r\n      )\r\n    } else if (course && this.props.Id != null && this.props.Id != \"null\" && !this.props.data.loading) {\r\n      return (\r\n        <div key={course.id}>\r\n          <span className=\"font-weight-bold\"> Name: {course.name}</span>\r\n          <span className=\"ml-2 font-weight-bold\"> Duration: {course.duration == null ? 0 : course.duration}</span>\r\n          {course.college.length > 0 && course.college.map(res =>\r\n            <>  <span className=\"ml-2 font-weight-bold\">College: {res.name}</span>\r\n              <div className=\"mt-2\">\r\n                <span className=\"underline font-weight-bold mx-auto\" >List of courses offered in the University</span>\r\n                <ol className=\"mlist mb-2\">\r\n                  {course.college[0].course != [] && course.college[0].course.map(data =>\r\n                    <li className='mt-1'>{data.name}</li>\r\n                  )}\r\n                </ol>\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      )\r\n    } else if (this.props.Id == \"null\") {\r\n      return (\r\n        <div>  Course has been deleted</div>\r\n      )\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"col-md-6 col-sm-12 mx-auto mt-5 py-3 content-justify-center course-details\">\r\n        <span className=\"courses form CD mb-0\" >\r\n          {this.displayCourseDetails()}\r\n        </span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default graphql(getOneCourseQuery, {\r\n  options: (props) => {\r\n    if (props.Id !== null) {\r\n      return {\r\n        variables: {\r\n          id: props.Id\r\n        }\r\n      }\r\n    }\r\n  }\r\n})(CourseDetails)","import React, { Component } from 'react'\r\nimport { gql } from 'apollo-boost'\r\nimport { graphql } from 'react-apollo'\r\nimport { getColleges, deleteCourse, getCourseQuery, addCourse, getOneCourseQuery } from './queries/queries'\r\nimport CourseDetails from './CourseDetails'\r\nimport { flowRight as compose } from 'lodash'\r\n\r\n\r\n\r\nclass CourseList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selected: null\r\n        }\r\n        this.onDelete = this.onDelete.bind(this)\r\n        this.onClick = this.onClick.bind(this)\r\n    }\r\n    onClick(e) {\r\n        this.setState({ selected: e.target.id })\r\n    }\r\n    onDelete(e) {\r\n        if (e.target.id === this.state.selected) {\r\n            this.setState({\r\n                selected: \"null\"\r\n            })\r\n        }\r\n\r\n        console.log(this.state.selected)\r\n        this.props.deleteCourse({\r\n            variables: {\r\n                id: `${e.target.id}`\r\n            },\r\n            refetchQueries: [\r\n                { query: getOneCourseQuery },\r\n                { query: getCourseQuery },\r\n                \r\n            ]\r\n        })\r\n        this.displayCourse()\r\n    }\r\n    displayCourse() {\r\n        console.log(data)\r\n        var data = this.props.getCourseQuery;\r\n        if (!data) {\r\n            return (\r\n                <div>loading ...</div>\r\n            )\r\n        } else if (data.courses) {\r\n            return data.courses.map(course => {\r\n                return (\r\n                    <div className=\" mx-auto py-1 border-bottom px-2 py-1 mt-1 white\">\r\n                        <div>\r\n                            <span id={course.id} onClick={this.onClick}>\r\n                                {course.name}\r\n                            </span>\r\n                            <div className=\"float-right fa fa-trash mt-1\" id={course.id} onClick={this.onDelete}></div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"row  mx-0 p-0\">\r\n                <div className=\"col-md-6 col-sm-12 px-2  mt-5 \">\r\n                    <div className=\"border p-2 \">\r\n                        {this.displayCourse()}\r\n                    </div>\r\n                </div>\r\n                <CourseDetails Id={this.state.selected !== null ? this.state.selected : null} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default compose(\r\n    graphql(deleteCourse, { name: \"deleteCourse\" }),\r\n    graphql(getCourseQuery, { name: \"getCourseQuery\" }),\r\n    graphql(getOneCourseQuery, { name: \"getOneCourseQuery\" }),\r\n    graphql(getColleges, { name: \"getColleges\" })\r\n)(CourseList)","import React, { Component } from 'react'\r\nimport { graphql } from 'react-apollo'\r\nimport { flowRight as compose } from 'lodash'\r\nimport { getColleges, addCourse, getCourseQuery } from './queries/queries'\r\n\r\n\r\n\r\nclass AddCourse extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            course_name: \"\",\r\n            duration: \"\",\r\n            college_id: \"\"\r\n        }\r\n        this.onChange = this.onChange.bind(this)\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n    }\r\n    onSubmit(e) {\r\n        e.preventDefault()\r\n        this.props.addCourse({\r\n            variables: {\r\n                name: this.state.course_name,\r\n                duration: this.state.duration,\r\n                collegeId: this.state.college_id\r\n            },\r\n            refetchQueries: [{ query: getCourseQuery }]\r\n        })\r\n    }\r\n    onChange(e) {\r\n        this.setState({\r\n            [e.target.name]: `${[e.target.value]}`,\r\n        })\r\n    }\r\n\r\n    displayCollege() {\r\n        let data = this.props.getColleges\r\n        if (data.loading) {\r\n            return (\r\n                <option>loading colleges..</option>\r\n            )\r\n        } else if (data.colleges) {\r\n            return data.colleges.map(college =>\r\n                <>\r\n                    <option key={college.id} value={college.id}>{college.name}</option>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} className=\" col-md-6 col-sm-12 \" >\r\n                <div className=\"form md-form\">\r\n                    <label>Course Name</label>\r\n                    <input type='text'\r\n                        className=\"form-control px-0\"\r\n                        onChange={this.onChange}\r\n                        // value={this.state.course_name}\r\n                        name='course_name'\r\n                    />\r\n                </div>\r\n                <div className=\"md-form\">\r\n                    <label>Duration</label>\r\n                    <input type=\"text\"\r\n                        className=\"form-control px-0\"\r\n                        onChange={this.onChange}\r\n                        value={this.state.duration}\r\n                        name='duration'\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"\">\r\n                    <select className=\"form-control px-0\"\r\n                        name=\"college_id\"\r\n                        value={this.state.college_id}\r\n                        onChange={this.onChange}\r\n                    >\r\n                        <option>Select Your College</option>\r\n                        {this.displayCollege()}\r\n                    </select>\r\n                </div>\r\n                <button className=\"btn rounded-pill p-2 border z-depth-0\">Add<span className=\"ml-1 fa fa-plus\" /></button> \r\n            </form>\r\n        )\r\n    }\r\n}\r\nexport default compose(\r\n    graphql(getColleges, { name: \"getColleges\" }),\r\n    graphql(addCourse, { name: \"addCourse\" })\r\n)(AddCourse)\r\n\r\n","import React, { Component } from 'react'\r\nimport './main.css'\r\nimport CourseList from './CourseList'\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport AddCourse from './AddCourse'\r\nimport { ApolloProvider } from 'react-apollo'\r\nimport ApolloClient from 'apollo-boost'\r\nconst client = new ApolloClient({\r\n  uri: `hhttps://course4us.herokuapp.com/graphql`\r\n})\r\nclass Graph extends Component {\r\n  render() {\r\n    \r\n    return (\r\n      <ApolloProvider client={client}>\r\n        <div className=\"container\">\r\n          <CourseList />\r\n          <AddCourse />\r\n        </div>\r\n      </ApolloProvider>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nReactDOM.render(\r\n  <BrowserRouter >\r\n      <Graph />\r\n  </BrowserRouter>,\r\n  document.getElementById('root'),\r\n);"],"sourceRoot":""}